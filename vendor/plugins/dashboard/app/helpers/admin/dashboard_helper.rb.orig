module Admin::DashboardHelper

  def activity_message_for(record)
<<<<<<< HEAD
    if (activity = Refinery::Plugins.active.find_activity_by_model(record.class)).present? and activity.title.present?
      title = h(record.send activity.title)
      link = link_to  truncate(title.to_s, :length => 45),
                      eval("#{activity.url}(#{activity.nesting("record")}record)"),
                      :title => "See '#{title}'"

      # next work out which action occured and how long ago it happened
      action = record.updated_at.eql?(record.created_at) ? "created" : "updated"

      message = "<td>#{refinery_icon_tag("#{activity.send "#{action}_image"}")}</td>"
      message << "<td>#{link} #{record.class.name.titleize.downcase} was #{action}</td>"
      message << "<td class='time_ago'>#{time_ago_in_words(record.send "#{action}_at").gsub("about ", "")} ago</td>"
=======
    #TODO Update translation & translate message properly
    if (activity = Refinery::Plugins.active.find_activity_by_model(record.class)).present? and activity.title.present?
      # work out which action occured
      action = record.updated_at.eql?(record.created_at) ? "created" : "updated"

      # get article to define gender of model name, some languages require this for proper grammar
      article = t("plugins.#{record.class.name.pluralize.downcase}.article", :default => 'the')

      # now create a link to the notification's corresponding record.
      link_to t(".latest_activity_message",
                :what => record.send(activity.title),
                :kind => record.class.human_name,
                :action => t("#{action}.with_article \"#{article}\"")
               ).downcase.capitalize, eval("#{activity.url}(#{activity.nesting("record")}record)")
>>>>>>> upstream/rails2-stable
    end
  end

end
